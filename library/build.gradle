plugins {
    id "com.larryhsiao.thea" version "1.5.0"
    id "org.jlleitschuh.gradle.ktlint" version "8.2.0"
}

apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'maven'

System.out.println(thea.versionIndicator())

def auraVersionName = thea.version().versionName()

android {
    compileSdkVersion 29

    defaultConfig {
        minSdkVersion 21
        targetSdkVersion 29

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    testOptions {
        unitTests {
            includeAndroidResources = true
            all {
                jacoco {
                    includeNoLocationClasses = true
                }
            }
        }
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
}

repositories {
    maven { url = 'https://larryhsiao.com:11000/repository/maven-public/' }
}

dependencies {
    implementation('androidx.asynclayoutinflater:asynclayoutinflater:1.0.0')
    implementation('androidx.swiperefreshlayout:swiperefreshlayout:1.1.0')
    implementation('com.squareup.picasso:picasso:2.71828') {
        // find compatible one to remove exclude
        exclude group: 'com.android.support', module: 'support-annotations'
        exclude group: 'com.android.support', module: 'exifinterface'
    }
    implementation 'androidx.biometric:biometric:1.1.0'
    implementation 'com.google.android.gms:play-services-location:18.0.0'
    implementation 'androidx.fragment:fragment:1.3.3'
    implementation 'androidx.appcompat:appcompat:1.2.0'
    implementation 'androidx.annotation:annotation:1.2.0'
    implementation 'androidx.core:core:1.3.2'
    implementation 'com.google.android.material:material:1.3.0'
    implementation 'androidx.recyclerview:recyclerview:1.2.0'
    implementation 'com.larryhsiao:clotho:1.18.6'
    implementation 'com.google.code.gson:gson:2.8.6'
    testImplementation 'junit:junit:4.13.2'
    testImplementation 'androidx.test:core:1.3.0'
    testImplementation 'org.robolectric:robolectric:4.4'
    testImplementation 'org.robolectric:shadows-multidex:4.0.2'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.3.0'
}

afterEvaluate {
    test.dependsOn ktlintCheck
}

apply plugin: 'jacoco'
jacoco {
    toolVersion = "0.8.5"
}
tasks.withType(Test) {
    jacoco.includeNoLocationClasses = true
    jacoco.excludes = ['jdk.internal.*']
}
task sourcesJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    classifier = 'sources'
}

task javadoc(type: Javadoc) {
    excludes = ['**/*.kt']
    source = android.sourceSets.main.java.srcDirs
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    failOnError false // FIXME
}
task javadocJar(type: Jar, dependsOn: javadoc) {
    from javadoc.destinationDir
    classifier = 'javadoc'
}
project.afterEvaluate {
    android.libraryVariants.all { variant ->
        def name = variant.name
        def testTaskName = "test${name.capitalize()}UnitTest"

        tasks.create(name: "${testTaskName}Coverage", type: JacocoReport, dependsOn: "$testTaskName") {
            group = "Reporting"
            description = "Generate Jacoco coverage reports for the ${name.capitalize()} build."

            classDirectories.from = fileTree(
                    dir: "${project.buildDir}/intermediates/javac/$name/",
                    includes: ['**/com/larryhsiao/aura/**'],
                    excludes: ['**/R.class',
                               '**/R$*.class',
                               '**/*$ViewInjector*.*',
                               '**/*$ViewBinder*.*',
                               '**/BuildConfig.*',
                               '**/Manifest*.*']
            ) + fileTree(
                    dir: "${project.buildDir}/tmp/kotlin-classes/$name",
                    includes: ['**/com/larryhsiao/aura/**'],
                    excludes: ['**/R.class',
                               '**/R$*.class',
                               '**/*$ViewInjector*.*',
                               '**/*$ViewBinder*.*',
                               '**/BuildConfig.*',
                               '**/Manifest*.*']
            )

            sourceDirectories.from = files(["${project.projectDir}/src/main/java", "${project.projectDir}/src/${variant.flavorName}/java"].plus(android.sourceSets[name].java.srcDirs))
            executionData.from = files("${project.buildDir}/jacoco/${testTaskName}.exec")

            reports {
                xml.enabled = true
                html.enabled = true
            }
        }
    }
}

apply plugin: 'digital.wup.android-maven-publish'
publishing {
    publications {
        release(MavenPublication) {
            artifact sourcesJar
            artifact javadocJar
            groupId 'com.larryhsiao'
            artifactId 'aura'
            version auraVersionName
            from components.android
        }
    }

    repositories {
        maven {
            url = 'https://larryhsiao.com:11000/repository/Elizabeth/'
            credentials {
                username(System.getenv("NEXUS_USER_NAME"))
                password(System.getenv("NEXUS_PASSWORD"))
            }
        }
    }
}