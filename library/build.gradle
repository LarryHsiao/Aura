apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'maven'

def auraVersionName = "1.13.1"

android {
    compileSdkVersion 28

    defaultConfig {
        minSdkVersion 17
        targetSdkVersion 28

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    testOptions {
        unitTests {
            includeAndroidResources = true
            all {
                jacoco {
                    includeNoLocationClasses = true
                }
            }
        }
    }
}

repositories {
    mavenCentral()
    google()
    maven { url = "https://dl.bintray.com/larryhsiao/Elizabeth" }
}

dependencies {
    androidTestImplementation('androidx.test.espresso:espresso-core:3.1.0-alpha3')
    implementation ('com.squareup.picasso:picasso:2.71828') {
        // find compatible one to remove exclude
        exclude group: 'com.android.support', module: 'support-annotations'
        exclude group: 'com.android.support', module: 'exifinterface'
    }
    implementation  'androidx.fragment:fragment:1.0.0'
    implementation 'androidx.appcompat:appcompat:1.0.2'
    implementation  'androidx.annotation:annotation:1.1.0'
    implementation  'androidx.core:core:1.0.2'
    implementation  'com.google.android.material:material:1.0.0'
    implementation  'androidx.recyclerview:recyclerview:1.0.0'
    implementation  'com.silverhetch:clotho:1.10.0'
    implementation  'com.google.code.gson:gson:2.8.5'
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    testImplementation 'junit:junit:4.12'
    testImplementation 'androidx.test:core:1.2.0'
    testImplementation 'org.robolectric:robolectric:4.3'
    testImplementation 'org.robolectric:shadows-multidex:4.0.2'
}


apply plugin: 'jacoco'
jacoco {
    toolVersion = "0.7.9"
}
task sourcesJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    classifier = 'sources'
}

task javadoc(type: Javadoc) {
    excludes = ['**/*.kt']
    source = android.sourceSets.main.java.srcDirs
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
}
task javadocJar(type: Jar, dependsOn: javadoc) {
    from javadoc.destinationDir
    classifier = 'javadoc'
}
project.afterEvaluate {
    android.libraryVariants.all { variant ->
        def name = variant.name
        def testTaskName = "test${name.capitalize()}UnitTest"

        tasks.create(name: "${testTaskName}Coverage", type: JacocoReport, dependsOn: "$testTaskName") {
            group = "Reporting"
            description = "Generate Jacoco coverage reports for the ${name.capitalize()} build."

            classDirectories = fileTree(
                    dir: "${project.buildDir}/intermediates/javac/$name/",
                    includes: ['**/com/silverhetch/aura/**'],
                    excludes: ['**/R.class',
                               '**/R$*.class',
                               '**/*$ViewInjector*.*',
                               '**/*$ViewBinder*.*',
                               '**/BuildConfig.*',
                               '**/Manifest*.*']
            ) + fileTree(
                    dir: "${project.buildDir}/tmp/kotlin-classes/$name",
                    includes: ['**/com/silverhetch/aura/**'],
                    excludes: ['**/R.class',
                               '**/R$*.class',
                               '**/*$ViewInjector*.*',
                               '**/*$ViewBinder*.*',
                               '**/BuildConfig.*',
                               '**/Manifest*.*']
            )

            sourceDirectories = files(["${project.projectDir}/src/main/java", "${project.projectDir}/src/${variant.flavorName}/java"].plus(android.sourceSets[name].java.srcDirs))
            executionData = files("${project.buildDir}/jacoco/${testTaskName}.exec")

            reports {
                xml.enabled = true
                html.enabled = true
            }
        }
    }
}


apply plugin: 'com.jfrog.bintray'
bintray {
    user = 'larryhsiao'
    key = System.getenv('BINTRAY_KEY')
    publications = ['release']
    publish = true
    override = true
    pkg {
        repo = 'Elizabeth'
        name = 'Aura'
        userOrg = 'larryhsiao'
        licenses = ['MIT']
        vcsUrl = 'https://github.com/LarryHsiao/Aura.git'
        version {
            name = auraVersionName
            gpg {
                sign = true
                passphrase = System.getenv('BINTRAY_PASSPHRASE')
            }
        }
    }
}

apply plugin: 'digital.wup.android-maven-publish'
publishing {
    publications {
        release(MavenPublication) {
            from components.android
            artifact sourcesJar
            artifact javadocJar
            groupId 'com.silverhetch'
            artifactId 'aura'
            version auraVersionName
        }
    }
}

apply plugin: 'org.sonarqube'
sonarqube {
    properties {
        property "sonar.projectName", "Aura"
        property "sonar.projectVersion", "${auraVersionName}"

        property 'sonar.sources', 'src/main/java'
        property "sonar.tests", "src/test/java"

//        property "sonar.java.binaries", "build/tmp/kotlin-classes/debug"

        property "sonar.java.coveragePlugin", "jacoco"
        property "sonar.android.lint.report", "build/reports/lint-results.xml"
        property "sonar.jacoco.reportPaths", "build/jacoco/testDebugUnitTest.exec"
        property "sonar.junit.reportPahts", "build/test-results/testDebugUnitTest"
    }
}